{"version":3,"sources":["index.js"],"names":["mailbox","mailbox64","data","color","hash","name","slide","offset","move","initRNGTable","table","i","push","j","Math","floor","random","Piece","props","display","className","Square","onClick","style","backgroundColor","value","ReadOnlySquare","fontSize","Board","state","seedTable","extraSeed","Array","squares","fill","colors","pieces","halfMoveClock","legals","canCastle","history","enPassant","selected","bNext","promoting","promote","gameOver","board","length","p","start","final","type","this","slice","castle","indexOf","direction","setState","lastHash","executeMove","iterable","moves","enemy","pieceID","piece","n","m","filter","inDanger","position","wKing","bKing","result","Object","entries","trimMoves","generateMoves","l","repeat","hashList","updateLegals","realizeMove","halfMove","checkEndGame","legal","handleClick","handleClickPromote","player","gameOverStatus","row","renderSquare","fullRow","columns","c","cSquare","promotePieces","align","renderPromoteSquare","borderCollapse","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1e283a8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'chess-merida-font/css/chessmerida-webfont.css';\n\n//mailbox from https://www.chessprogramming.org/10x12_Board\nconst mailbox = [\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n     -1,  0,  1,  2,  3,  4,  5,  6,  7, -1,\n     -1,  8,  9, 10, 11, 12, 13, 14, 15, -1,\n     -1, 16, 17, 18, 19, 20, 21, 22, 23, -1,\n     -1, 24, 25, 26, 27, 28, 29, 30, 31, -1,\n     -1, 32, 33, 34, 35, 36, 37, 38, 39, -1,\n     -1, 40, 41, 42, 43, 44, 45, 46, 47, -1,\n     -1, 48, 49, 50, 51, 52, 53, 54, 55, -1,\n     -1, 56, 57, 58, 59, 60, 61, 62, 63, -1,\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n];\n\nconst mailbox64 = [\n    21, 22, 23, 24, 25, 26, 27, 28,\n    31, 32, 33, 34, 35, 36, 37, 38,\n    41, 42, 43, 44, 45, 46, 47, 48,\n    51, 52, 53, 54, 55, 56, 57, 58,\n    61, 62, 63, 64, 65, 66, 67, 68,\n    71, 72, 73, 74, 75, 76, 77, 78,\n    81, 82, 83, 84, 85, 86, 87, 88,\n    91, 92, 93, 94, 95, 96, 97, 98\n];\n\nconst data = {\n    '\\u2659':{ color: 1, hash: 0, name:  '', slide: false, offset: [ -9, -11 ], move: -10}, /* PAWN */\n    '\\u2658':{ color: 1, hash: 1, name: 'N', slide: false, offset: [ -21, -19,-12, -8, 8, 12, 19, 21 ], /* KNIGHT */ },\n\t'\\u2657':{ color: 1, hash: 2, name: 'B', slide: true,  offset: [ -11,  -9,  9, 11 ], /* BISHOP */ },\n\t'\\u2656':{ color: 1, hash: 3, name: 'R', slide: true,  offset: [ -10,  -1,  1, 10 ], /* ROOK */ },\n\t'\\u2655':{ color: 1, hash: 4, name: 'Q', slide: true,  offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ], /* QUEEN */ },\n\t'\\u2654':{ color: 1, hash: 5, name: 'K', slide: false, offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ],  /* KING */ },\n    //black pieces\n    '\\u265f':{ color: 2, hash: 6, name:  '', slide: false, offset: [ 9, 11 ], move: 10}, /* PAWN */\n    '\\u265e':{ color: 2, hash: 7, name: 'N', slide: false, offset: [ -21, -19,-12, -8, 8, 12, 19, 21 ], /* KNIGHT */},\n    '\\u265d':{ color: 2, hash: 8, name: 'B', slide: true,  offset: [ -11,  -9,  9, 11 ], /* BISHOP */},\n    '\\u265c':{ color: 2, hash: 9,name: 'R', slide: true,  offset: [ -10,  -1,  1, 10 ], /* ROOK */},\n    '\\u265b':{ color: 2, hash: 10,name: 'Q', slide: true,  offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ], /* QUEEN */},\n    '\\u265a':{ color: 2, hash: 11,name: 'K', slide: false, offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ]  /* KING */},\n};\n\n//initialize a table of hashes for a modified Zobrist hashing\n//https://www.chessprogramming.org/Zobrist_Hashing\nfunction initRNGTable(){\n  const table = [];\n  for (let i = 0; i < 64; ++i){\n    table.push([]);\n    for (let j = 0; j < 12; ++j){\n      table[i].push(Math.floor(Math.random() * 2**32));\n    }\n  }\n  return table;\n}\n\nfunction Piece(props) {\n  let display;\n  switch (props.display){\n    case '\\u2654':\n      display = \"cm cm-w-king\";\n      break;\n    case '\\u2655':\n      display = \"cm cm-w-queen\";\n      break;\n    case '\\u2656':\n      display = \"cm cm-w-rook\";\n      break;\n    case '\\u2657':\n      display = \"cm cm-w-bishop\";\n      break;\n    case '\\u2658':\n      display = \"cm cm-w-knight\";\n      break;\n    case '\\u2659':\n      display = \"cm cm-w-pawn\";\n      break;\n    case '\\u265a':\n      display = \"cm cm-b-king\";\n      break;\n    case '\\u265b':\n      display = \"cm cm-b-queen\";\n      break;\n    case '\\u265c':\n      display = \"cm cm-b-rook\";\n      break;\n    case '\\u265d':\n      display = \"cm cm-b-bishop\";\n      break;\n    case '\\u265e':\n      display = \"cm cm-b-knight\";\n      break;\n    case '\\u265f':\n      display = \"cm cm-b-pawn\";\n      break;\n    default:\n  }\n  return (\n    <i\n      className={display}\n      aria-hidden=\"true\"\n    />);\n}\n\nfunction Square(props) {\n  return (\n    <button\n      className = \"square\"\n      onClick = {props.onClick}\n      style={{backgroundColor: props.color}}\n    >\n      <Piece display={props.value}/>\n    </button>\n  );\n}\n\nfunction ReadOnlySquare(props) {\n  return (\n    <button\n      className = \"square\"\n      style = {{backgroundColor: \"#fff\", fontSize: \"12px\"}}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seedTable: [initRNGTable(), initRNGTable()],\n      hash: [0, 0],\n      extraSeed: Array(6),//for hashing other data\n      //seed 0-4 is for castling, seed 5 for turn player, seed 6 for en passant\n      squares: Array(64).fill(null),\n      colors: Array(64).fill(null),\n      //generate move per piece requires tracking pieces\n      pieces: [48, 49, 50, 51, 52, 53, 54, 55,\n               56, 57, 58, 59, 60, 61, 62, 63,//white\n                8,  9, 10, 11, 12, 13, 14, 15,\n                0,  1,  2,  3,  4,  5,  6,  7],//black\n\n      halfMoveClock: 0,\n      legals: Array(64).fill(0),\n      canCastle: Array(4).fill(1),//white-long, white-short, black-long, black-short\n      history: [[],[]],\n      enPassant: -1,\n      selected: -1,\n      bNext: true,\n      promoting: -1,\n      promote: null,\n      gameOver: 0,\n    };\n\n\n    const board = this.state.squares;\n    //white pieces\n    board[63] = '\\u2656';\n    board[62] = '\\u2658';\n    board[61] = '\\u2657';\n    board[60] = '\\u2654';\n    board[59] = '\\u2655';\n    board[58] = '\\u2657';\n    board[57] = '\\u2658';\n    board[56] = '\\u2656';\n    for (let i = 0; i < 8; ++i){\n      board[i+48] = '\\u2659';\n      this.state.colors[i+48] = 1;\n      this.state.colors[i+56] = 1;\n    }\n    //black pieces\n    board[0] = '\\u265c';\n    board[1] = '\\u265e';\n    board[2] = '\\u265d';\n    board[3] = '\\u265b';\n    board[4] = '\\u265a';\n    board[5] = '\\u265d';\n    board[6] = '\\u265e';\n    board[7] = '\\u265c';\n    for (let i = 0; i < 8; ++i){\n      board[i+8] = '\\u265f';\n      this.state.colors[i+8] = 2;\n      this.state.colors[i] = 2;\n    }\n\n    for (let i = 0; i < this.state.extraSeed.length; ++i){\n      this.state.extraSeed[i] = Math.floor(Math.random() * 2**32);\n    }\n\n    for (let i = 0; i < board.length; ++i){\n      if (board[i] !== null){\n        const j = data[this.state.squares[i]].hash;\n        this.state.hash[0] ^= this.state.seedTable[0][i][j];\n        this.state.hash[1] ^= this.state.seedTable[1][i][j];\n      }\n    }\n\n    this.state.history[0].push(this.state.hash[0]);\n    this.state.history[1].push(this.state.hash[1]);\n  }\n\n  //does not check if move is legal\n  //returns a position object\n  executeMove(p, start, final, type){\n    const board = this.state.squares.slice();\n    const colors = this.state.colors.slice();\n    const castle = this.state.canCastle.slice();\n    const pieces = this.state.pieces.slice();\n    let enPassant = -1;\n\n    if (board[final] !== null){\n      pieces[this.state.pieces.indexOf(final)] = -1;//piece is captured.\n    }\n\n    pieces[p] = final;\n    board[final] = board[start];\n    board[start] = null;\n    colors[final] = colors[start];\n    colors[start] = null;\n\n    if (type < 0) enPassant = -type;\n\n    if (type < 3){\n      castle[0] &= (start !== 56) && (start !== 60);//left white rook moved or white king moved\n      castle[1] &= (start !== 63) && (start !== 60);//right white rook moved or white king moved\n      castle[2] &= (start !==  0) && (start !==  4);//left black rook moved or black king moved\n      castle[3] &= (start !==  7) && (start !==  4);//right white rook moved or black king moved\n\n    } else if (type === 3){//en passant capture\n      const direction = (final - start) > 0 ? (final - start - 8) : (final - start + 8);\n      pieces[this.state.pieces.indexOf(start + direction)] = -1;\n      board[start + direction] = null;\n      colors[start + direction] = null;\n    } else if (type < 8) {//castling, hard coded\n      castle[type-4] = 0;//disable the type we just did\n      switch(type){\n        case 4://0-0-0\n          castle[1] = 0;//disable the other way of castling (can't castle long after castling short, and vice versa)\n          pieces[8] = 59;\n          board[59] = board[56];\n          colors[59] = colors[56];\n          board[56] = null;\n          colors[56] = null;//these 5 lines are just moving the rook\n          break;\n        case 5://0-0\n          castle[0] = 0;\n          pieces[15] = 61;\n          board[61] = board[63];\n          colors[61] = colors[63];\n          board[63] = null;\n          colors[63] = null;\n          break;\n        case 6://...0-0-0\n          castle[3] = 0;\n          pieces[24] = 3;\n          board[3] = board[0];\n          colors[3] = colors[0];\n          board[0] = null;\n          colors[0] = null;\n          break;\n        case 7://...0-0\n          castle[2] = 0;\n          pieces[31] = 5;\n          board[5] = board[7];\n          colors[5] = colors[7];\n          board[7] = null;\n          colors[7] = null;\n          break;\n        default://do nothing\n      }\n    } else {//promotion\n      this.setState({promoting: final});\n    }\n    return {\n      squares: board,\n      colors: colors,\n      pieces: pieces,\n      canCastle: castle,\n      enPassant: enPassant,\n    };\n  }\n\n  realizeMove(p, start, final, type){\n    const lastHash = this.hash(p,  start, final, type);\n    this.setState({\n          hash: lastHash,\n          history: [\n            [...this.state.history[0], lastHash[0]],\n            [...this.state.history[1], lastHash[1]]\n          ]\n        });\n    return this.executeMove(p,  start, final, type);\n  }\n\n  //use 2 32-bit hashes for the board instead of 1 64-bit hash because Javascript Number stops at 53 bit\n  hash(p, start, final, type){\n    const iterable = this.state.hash;\n    const board = this.state.squares;\n    for (let i = 0; i < 2; ++i){\n      if (board[final] !== null)\n        iterable[i] ^= this.state.seedTable[i][final][data[board[final]].hash];//remove captured piece if any\n      iterable[i] ^= this.state.seedTable[i][start][data[board[start]].hash];//these lines represent piece moving\n      iterable[i] ^= this.state.seedTable[i][final][data[board[start]].hash];\n      for (let j = 0; j < this.state.canCastle.length; j++){\n        iterable[i] ^= this.state.canCastle[j] && this.state.extraSeed[j];\n      }\n      iterable[i] ^= this.state.extraSeed[4];\n      iterable[i] ^= this.state.extraSeed[5]*this.state.enPassant;\n    }\n    return iterable;\n  }\n\n  //generates pseudo-legal moves (moves that the pieces could make, but not necessarily results in a legal position)\n  generateMoves(p){\n    const i = this.state.pieces[p];\n    let moves = [];\n    if (i===-1) return moves;\n    const board = this.state.squares;\n    const colors = this.state.colors;\n    const enemy = colors[i] === 1 ? 2 : 1;\n    const pieceID = board[i];\n    const piece = data[pieceID];\n    if (piece.name){//non-pawns\n      for (const offset of piece.offset){\n        for (let n = i;;){\n          n = mailbox[mailbox64[n] + offset];\n          if (n === -1) break; /* outside board */\n          if (colors[n] !== null) {\n            if (colors[n] === enemy) moves.push([p, i, n, 2]); /* capture from i to n */\n          break;\n          }\n          moves.push([p, i, n, 1]); /* quiet move from i to n */\n          if (!piece.slide) break; /* next direction */\n        }\n      }\n    } else {//pawns have custom behaviour\n      for (const offset of piece.offset){//capturing diagonally forward\n        let n = i;\n        n = mailbox[mailbox64[n] + offset];\n        if (n !== -1 && colors[n] === enemy){\n          if ( (n <= 7 && n >= 0) || (n <= 63 && n >= 56))\n          {//pawns reaching last rank must promote\n            moves.push([p, i, n, 9]);\n          } else moves.push([p, i, n, 2]);\n        }\n        else if (n !== -1 && this.state.enPassant === n) {//captures en passant\n          moves.push([p, i, n, 3]);\n        }\n      }\n      const n = mailbox[mailbox64[i] + piece.move];//moving forward\n      if (colors[n] === null){\n        if ( (n <= 7 && n >= 0) || (n <= 63 && n >= 56))\n        {//pawns reaching last rank must promote\n          moves.push([p, i, n, 8]);\n        } else {\n          moves.push([p, i, n, 1]);\n          if ( (n <= 23 && n >= 16 && colors[i] === 2)\n            || (n <= 47 && n >= 40 && colors[i] === 1))\n          {//if the piece could land on the 3rd/6th rank, it must have started from the origin\n            const m = mailbox[mailbox64[n] + piece.move];\n            if (colors[m] === null) {\n              moves.push([p, i, m, -n]);//type carries information required for en passant\n            }\n          }\n        }\n      }\n    }\n    if (pieceID === '\\u2654' ){//castling, hard coded checks\n      if (this.state.canCastle[0] && board[57] === null && board[58] === null && board[59] === null){\n        moves.push([p,i,i-2,4]);\n      }\n      if (this.state.canCastle[1] && board[61] === null && board[62] === null){\n        moves.push([p,i,i+2,5]);\n      }\n    } else if (pieceID === '\\u265a'){\n      if (this.state.canCastle[2] && board[1] === null && board[2] === null && board[3] === null){\n        moves.push([p,i,i-2,6]);\n      }\n      if (this.state.canCastle[3] && board[5] === null && board[6] === null){\n        moves.push([p,i,i+2,7]);\n      }\n    }\n\n    return moves;\n  }\n\n  //take moves generated by generateMoves and remove illegal ones\n  trimMoves(moves){\n    return moves.filter(move => {\n      if ((move[0] < 16) !== this.state.bNext) return false;\n      switch (move[3]){\n        case 4:\n          return !(this.inDanger(60, this.state) & 2)\n            && !(this.inDanger(59, this.state) & 2)\n            && !(this.inDanger(58, this.state) & 2);\n        case 5:\n          return !(this.inDanger(60, this.state) & 2)\n            && !(this.inDanger(61, this.state) & 2)\n            && !(this.inDanger(62, this.state) & 2);\n        case 6:\n          return !(this.inDanger(4, this.state) & 1)\n            && !(this.inDanger(3, this.state) & 1)\n            && !(this.inDanger(2, this.state) & 1);\n        case 7:\n          return !(this.inDanger(4, this.state) & 1)\n            && !(this.inDanger(5, this.state) & 1)\n            && !(this.inDanger(6, this.state) & 1);\n        default://do nothing\n      }\n      let position;\n      //promoting is treated as the regular move\n      if (move[3] >= 8) position = this.executeMove(move[0], move[1], move[2], move[3]-7);\n      else position = this.executeMove(...move);\n      const bNext = this.state.bNext;\n      const wKing = position.pieces[12];\n      const bKing = position.pieces[28];\n      if (this.inDanger(wKing, position) & 2 && bNext) return false;\n      else if (this.inDanger(bKing, position) & 1 && !bNext) return false;\n      else return true;\n    });\n  }\n\n  //check if square is being attacked\n  //0 is not attacked\n  //1 is attacked by white\n  //2 is attacked by black\n  //3 is attacked by both\n  inDanger(i, position){\n    let result = 0;\n    for (const [pieceID, piece] of Object.entries(data)){\n      for (const offset of piece.offset){\n        //if a piece of the same color can already capture square i, skip this piece\n        if (piece.color & result) continue;\n        for (let n = i;;){\n          n = mailbox[mailbox64[n] - offset];//reversed offset for calculating backwards, only relevant for pawns\n          if (n === -1) break; /* outside board */\n          if (position.squares[n] === pieceID){\n            result |= piece.color;\n            break;\n          } else if (position.squares[n]) break;//ray cast stops when a piece is found\n          if (!piece.slide) break; /* next direction */\n        }\n      }\n    }\n\n    return result;\n  }\n\n  //updates squares available to the focused piece\n  updateLegals(i){\n    const p = this.state.pieces.indexOf(i);\n    let legals = Array(64).fill(0);\n    if (p>=0) {\n      const moves = this.trimMoves(this.generateMoves(p));\n      for (const move of moves) {\n        legals[move[2]] = move[3];\n      }\n    }\n    this.setState({legals: legals});\n  }\n\n  checkEndGame(){\n    let l = 0;\n    for (let i = 0; i < 32; ++i){\n      l += this.trimMoves(this.generateMoves(i)).length;\n    }\n    if (l === 0 ) {\n      this.setState({gameOver: 1});\n      return;\n    }\n\n    let repeat = 0;\n    const hashList = this.state.history;\n    const lastHash = this.state.hash;\n    for (let i = 0; i < hashList[0].length; ++i){\n      if (hashList[0][i] !== lastHash[0] || hashList[1][i] !== lastHash[1]){\n        continue;\n      } else repeat++;\n    }\n    if (repeat >= 3 ) {\n      this.setState({gameOver: 2});\n      return;\n    }\n\n    if (this.state.halfMoveClock >= 50) {\n      this.setState({gameOver: 3});\n      return;\n    }\n\n  }\n\n  //just handle clicking a square\n  handleClick(i){\n    if (this.state.promoting >= 0) return;//promoting, board locked\n    if (this.state.gameOver) return;\n    const squares = this.state.squares.slice();\n    const selected = this.state.selected;\n    if (selected === -1 //haven't clicked\n       || selected === i //clicked the same square\n       || squares[selected] === null //clicked an empty square\n       || this.state.legals[i] === 0 //clicked an illegal square\n       ) {\n      this.updateLegals(i);\n      this.setState({selected: i});\n    } else {\n      const p = this.state.pieces.indexOf(selected);\n      const position = this.realizeMove(p, selected, i, this.state.legals[i]);//move from selected to current square\n      let halfMove = this.state.halfMoveClock;\n      if (this.state.squares[i] === \"\\u2659\" || this.state.squares[i] === \"\\u265f\") halfMove = 0;\n      else halfMove++;\n      this.setState({\n        halfMoveClock: halfMove,\n        selected: -1,\n        squares: position.squares,\n        colors: position.colors,\n        pieces: position.pieces,\n        canCastle: position.canCastle,\n        enPassant: position.enPassant,\n        legals: Array(64).fill(0),\n        bNext:!this.state.bNext,\n      }, this.checkEndGame);\n    }\n  }\n\n  handleClickPromote(i){\n    const promoting = this.state.promoting;\n    const board = this.state.squares;\n    board[promoting] = i;\n    this.setState({\n      promoting: -1,\n      promote: i,\n      squares: board,\n    });\n  }\n\n  renderSquare(i) {\n    const legal = !(this.state.legals[i] === 0);\n    //processing for square color\n    let color = '';\n    if (this.state.selected === i) color = \"#2f2\";\n    if ( ((i&7)+(i>>3)) % 2 === 1){//checkerboard pattern\n      if (this.state.selected !== i) color = \"#7d8796\";\n      else color = \"#0d0\";\n      if (legal) color = \"#bbbb00\";\n    } else if (legal) color = \"#ffff00\";\n    const wKing = this.state.pieces[12];\n    const bKing = this.state.pieces[28];\n    if ((wKing === i && this.inDanger(wKing, this.state) & 2 && this.state.bNext)\n      ||(bKing === i && this.inDanger(bKing, this.state) & 1 && !this.state.bNext))\n     color = \"#f44\";\n    return (\n    <td key={i}>\n    <Square\n      value={this.state.squares[i]}\n      color={color}\n      onClick={() => this.handleClick(i)}\n    />\n    </td>\n    );\n  }\n\n  renderPromoteSquare(i){\n    if (this.state.promoting < 0) return null;//only visible for promotion\n    if ((data[i].color === 2) !== this.state.bNext) return null;//show the right color\n    return (\n    <td key={i}>\n    <Square\n      value={i}\n      onClick={() => this.handleClickPromote(i)}\n    />\n    </td>\n    );\n  }\n\n  render() {\n    const player = 'Next player: ' + (this.state.bNext ? 'White' : 'Black');\n    let gameOverStatus = null;\n    if (this.state.gameOver === 1){\n      const bNext = this.state.bNext;\n      const wKing = this.state.pieces[12];\n      const bKing = this.state.pieces[28];\n      if (this.inDanger(wKing, this.state) & 2 && bNext) gameOverStatus = 'Black wins';\n      else if (this.inDanger(bKing, this.state) & 1 && !bNext) gameOverStatus = 'White wins';\n      else gameOverStatus = 'Stalemate';\n    } else if (this.state.gameOver === 2) gameOverStatus = 'Draw by 3-fold repetition';\n    else if (this.state.gameOver === 3) gameOverStatus = 'Draw by inactivity';\n\n    const squares = [];\n    for (let i = 0; i < 8; i++){\n      const row = [];\n      for (let j = 0; j < 8; j++){\n        row.push(this.renderSquare(i*8+j));\n      }\n      const fullRow =\n        <tr className=\"board-row\" key={8-i}>\n          <td><ReadOnlySquare value = {8-i} color = {'white'}/></td>\n          {row}\n          <td><ReadOnlySquare value = {8-i} color = {'white'}/></td>\n        </tr>;\n      squares.push(fullRow);\n    }\n    const columnChars = \" abcdefgh\\t\";\n    const columns = [];\n    for (const c of columnChars){\n      const cSquare = <td key = {c}><ReadOnlySquare value = {c} color = {'white'} /></td>;\n      columns.push(cSquare);\n    }\n\n    const promotePieces = [];\n    for (let i = 0; i < 3; ++i){\n      const align = <ReadOnlySquare value = {' '} key = {i}/>;\n      promotePieces.push(align);\n    }\n    //promotion order is from most to least common\n    //white promoting\n    promotePieces.push(this.renderPromoteSquare('\\u2655'));\n    promotePieces.push(this.renderPromoteSquare('\\u2658'));\n    promotePieces.push(this.renderPromoteSquare('\\u2656'));\n    promotePieces.push(this.renderPromoteSquare('\\u2657'));\n    //black promoting\n    promotePieces.push(this.renderPromoteSquare('\\u265b'));\n    promotePieces.push(this.renderPromoteSquare('\\u265e'));\n    promotePieces.push(this.renderPromoteSquare('\\u265c'));\n    promotePieces.push(this.renderPromoteSquare('\\u265d'));\n\n    return (\n      <div>\n        <div className=\"status\">{player}</div>\n        <table\n          className=\"board\"\n          style={{borderCollapse: \"collapse\"}}\n        >\n          <tbody>\n            <tr>{columns}</tr>\n            {squares}\n            <tr>{columns}</tr>\n          </tbody>\n        </table>\n        {promotePieces}\n        <div className=\"gameOver\">\n          {gameOverStatus}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}